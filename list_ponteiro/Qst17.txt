#include <time.h>
#include <stdio.h>
#include <stdlib.h>


int crescente(const void * a, const void * b)
{
	//resgata os valores atraves dos endereços
    float l = *(const float *)a; 
    float r = *(const float *)b;
  return ((int) l - r );
}


int main () {

   srand(time(NULL));   
   clock_t start_t[2], end_t[2], total_t[2];
   int i, n,maior, *a, *b;
   
   
   printf("Insira tamnaho do array: ");
   scanf("%d", &n);
   
   a = (int*)malloc(n*sizeof(int));
   b = (int*)malloc(n*sizeof(int));
   
   for(i=0; i< n; i++) {
       a[i] = rand() % 51;
       b[i] = a[i];
   }
   
   
   start_t[0] = clock();
   printf("Inciciando o ordenacao regular, start_t = %ld\n", start_t[0]);
   
    for (i = 1; i < n; i++){
		for (int j = i; j > 0; j--){
		if (a[j]<a[j-1]){
			maior = a[j];
			a[j] = a[j-1];
			a[j-1] = maior;
		    }
		}
    }
   end_t[0] = clock();
   printf("Fim da ordenacao regular, end_t = %ld\n", end_t[0]);
  
   start_t[1] = clock();
    printf("Inciciando o ordenacao qsort, start_t = %ld\n", start_t[1]);
   qsort((void*)b, n, sizeof(b[0]),crescente);
   end_t[1] = clock();
   printf("Fim da ordenacao qsort, end_t = %ld\n", end_t[1]);
   
   total_t[0] = (double)(end_t[0] - start_t[0]) / CLOCKS_PER_SEC;
   total_t[1] = (double)(end_t[1] - start_t[1]) / CLOCKS_PER_SEC;
  
   printf("Tempo total da CPU na ordenacao Regular: %f\n", total_t[0]  );
   printf("Tempo total da CPU na ordenacao qsort: %f\n", total_t[1]  );

   return(0);
}